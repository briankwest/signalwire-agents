────────────────────────────────────────────────────────────────────────────
SignalWire AI Agent SDK – High-Level Architecture
────────────────────────────────────────────────────────────────────────────

1. Purpose & Vision
-------------------
Build a Python-based, object-oriented SDK that lets developers create,
host and secure SignalWire AI agents as *micro-services* with almost no
boiler-plate.  
•  Each agent instance is both a web app (serves SWML & SWAIG endpoints)  
   and an AI persona (prompt, tools, memory).  
•  Security, SWML generation, SWAIG plumbing and per-call state are all
   handled by the framework so that subclass authors only implement
   business logic.

2. Layered Model
----------------
    ┌───────────────────────────────┐
    │  Custom Agent Classes         │  (User code)
    ├───────────────────────────────┤
    │  Prefab Archetypes            │  (InfoGatherer, FAQBot, …)
    ├───────────────────────────────┤
    │  AgentBase                    │  (Prompt builder, SWML, HTTP, auth)
    ├───────────────────────────────┤
    │  Core Helpers & Runtime       │  (SwaigFunction, Result, SessionMgr)
    └───────────────────────────────┘

3. Core Components
------------------
A. AgentBase  
   •  __init__(name, route, host, port, …) – registers router & auth  
   •  Prompt Builder  
      – Maintains `_prompt_sections` list of POM-compliant sections  
      – Sugar setters (`set_personality`, `add_instruction`, …)  
      – Fallback to `set_prompt_text()` / `set_prompt_pom()` for raw use  
   •  SWML Renderer `_render_swml(call_id)`  
      – Serialises prompt, SWAIG registry, post_prompt_url, hooks  
   •  Web Interface (`serve`, `as_router`)  
      – GET  /route                → SWML document  
      – POST /route/post_prompt    → summary handler  
      – POST /route/tools/<fn>     → token-validated SWAIG call  
   •  Call-Session Manager  
      – Generates `call_id`, per-function tokens  
      – `startup_hook` activates, `hangup_hook` invalidates session  

B. SwaigFunction  
   •  Declarative descriptor holding `name`, `description`, `parameters`,
      `handler`, `secure` flag.  
   •  `to_swaig(base_url, token, call_id)` returns JSON ready for SWML.  
   •  Decorator style  `@tool(name=…, parameters=…)`.

C. SwaigFunctionResult  
   •  Wrapper around SWAIG response payload.  
   •  `set_response()`, `add_action(type, **kwargs)`, `to_dict()`.

D. Session / Security  
   •  Basic-Auth for SWML + post_prompt endpoints.  
   •  Ephemeral per-call tokens embedded into SWAIG URLs.  
   •  Tokens live from `startup_hook` → `hangup_hook`.

E. Prefab Archetypes  
   •  `InfoGathererAgent(fields=[…], confirmation_template=…)`  
   •  `SurveyAgent`, `FAQBotAgent`, `ConciergeAgent`, etc.  
   •  Supply `PROMPT_SECTIONS`, default tools & summary formats.  
   •  Zero code beyond constructor arguments for most cases.

4. Operational Flow
-------------------
1. SignalWire hits  `/agent`  (basic-auth) → SDK returns SWML.  
2. SWML contains:  
      • Prompt (rendered POM)  
      • post_prompt_url (basic-auth)  
      • startup/hangup hooks (tokenised URLs)  
      • SWAIG array with per-function tokenised URLs.  
3. startup_hook fires → session marked *active*.  
4. During call AI invokes `/tools/<fn>` with token & call_id → SDK
   validates → executes `handler` → returns `SwaigFunctionResult`.  
5. hangup_hook fires → session & tokens purged.  
6. post_prompt summary arrives → `on_summary()` callback runs.

5. Extensibility Points
-----------------------
•  Override any of:  
   – `get_prompt()`, `get_post_prompt()`  
   – `define_tools()` or decorated methods  
   – `on_summary(summary)`  
   – `on_function_call(name, args)` for catch-all logic  
•  Add new prompt section helpers in AgentBase without breaking prefabs.  
•  Plug custom authentication/authorisation by overriding
   `validate_basic_auth()` and `validate_tool_token()`.

6. Deployment Modes
-------------------
A. Single-Agent Microservice  
   ```
   agent = SupportBot()
   agent.serve(host="0.0.0.0", port=8080, route="/support")
   ```
B. Multi-Agent Host  
   ```
   server = AgentServer()
   server.register(SupportBot(), "/support")
   server.register(SalesBot(),   "/sales")
   server.run()
   ```
   ( `AgentServer` is a thin FastAPI/Flask wrapper around multiple
     `agent.as_router()` instances. )

7. Future Enhancements
----------------------
•  RAG connectors, memory stores, analytics hooks.  
•  Auto-documentation / OpenAPI export for all SWAIG tools.  
•  CLI & Cookiecutter templates for rapid new-agent scaffolding.  
•  Pluggable token strategies (JWT, HMAC, one-time-pad).  
•  Built-in LLM unit-testing harness (prompt + mock tool calls).

────────────────────────────────────────────────────────────────────────────
End of Architecture Overview
────────────────────────────────────────────────────────────────────────────
